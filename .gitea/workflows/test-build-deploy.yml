name: Test, build, and deploy actions
on:
  push:
    branches:
      - master
  workflow_dispatch:
jobs:
  run-tests:
    runs-on: ubuntu-latest
    env:
      DB_CONNECTION: pgsql
      DB_HOST: 10.5.10.11
      DB_PORT: 5432
      DB_DATABASE: projects-testing
      DB_USERNAME: mbarclay36
      DB_PASSWORD: ${{ secrets.PGSQL_PASSWORD }}
      JWT_SECRET: ${{ secrets.JWT_SECRET }}
      MINIO_ACCESS_KEY_ID: ${{ secrets.MINIO_ACCESS_KEY }}
      MINIO_SECRET_ACCESS_KEY: ${{ secrets.MINIO_SECRET_KEY }}
      MINIO_DEFAULT_REGION: home
      MINIO_BUCKET: home-dashboard
      LOCAL_MINIO_ENDPOINT: http://10.5.10.11:9002
      REMOTE_MINIO_ENDPOINT: https://minio.bigmike.dev
    steps:
      - name: Check out repository code
        uses: actions/checkout@v4
      - name: Setup PHP
        uses: shivammathur/setup-php@v3
        with:
          php-version: '8.2'
          extensions: mbstring, dom, fileinfo, pgsql
      - name: Prepare env
        run: touch .env
      - name: Composer install
        run: composer install -n --prefer-dist
      - name: Run tests
        run: php artisan test
  build-image:
    runs-on: ubuntu-latest
    needs: [run-tests]
    steps:
      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          tags: type=sha
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Build and push
        uses: docker/build-push-action@v6
        with:
          push: true
          file: ./docker/Dockerfile
          tags: |
            docker-registry.bigmike.dev/projects-api:latest
            docker-registry.bigmike.dev/projects-api:${{ steps.meta.outputs.tags }}
  run-portainer-webhook:
    runs-on: ubuntu-latest
    needs: [build-image]
    steps:
      - name: Run curl command
        run: curl --location --request POST 'http://10.5.10.11:9000/api/stacks/webhooks/e22679a0-188c-466a-bbd9-7796f0d685fc'
  job-status-notification:
    runs-on: ubuntu-latest
    if: ${{ always() }}
    needs: [ run-portainer-webhook ]
    steps:
      - name: Send success notification
        if: ${{ needs.run-portainer-webhook.result == 'success' }}
        run: |
          curl --location --request POST 'https://gotify.bigmike.dev/message?token=AfI_HNqzh6EXFk0' --header 'Content-Type: application/json' \
          --data-raw '{"message": "projects-api pipeline success","priority": 10,"title": "Gitea Success"}'
      - name: Send failure notification
        if: ${{ needs.run-portainer-webhook.result == 'failure' || needs.run-portainer-webhook.result == 'skipped' }}
        run: |
          curl --location --request POST 'https://gotify.bigmike.dev/message?token=AfI_HNqzh6EXFk0' --header 'Content-Type: application/json' \
          --data-raw '{"message": "projects-api pipeline failed","priority": 10,"title": "Gitea Failure"}'

